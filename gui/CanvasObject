-- Initialization Phase --
local rawArgs = {...}
local args, parent = rawArgs[1], rawArgs[2]	-- Receive given arguments when creating the object
local object = {}

bAssert(args.left and args.right or ( args.left or args.right ) and args.width, "x-Size not defined", 1)
bAssert(args.top and args.bottom or ( args.top or args.bottom ) and args.height, "y-Size not defined", 1)
-- Initialization Phase --


-- Variables --
self.left		=	args.left;
self.right		=	args.right;
self.top		=	args.top;
self.bottom		=	args.bottom;
self.width		=	args.width;
self.height		=	args.height;
self.children	=	{};
self.boundaries	=	{};
-- Variables --


-- Functions --
local function getSize( str, n, m )
	--[[
		Calculates the size of an object with the boundaries <n> and <m> with a given string.
		Allowed are percentage values and numeric values, mixing is possible, with commas as a separator.

		Example:
		"-25.5%, 4"
	]]--

	str = type( str ) == "string" and str or tostring( str )
	local size = 0

	for k in str:gmatch( "(-?%d+%.?%d*%%?)%s*,?" ) do
		if k:match( "-?%d+%.?%d*%%" ) then
			size = size + math.floor( k:match( "(-?%d+%.?%d*)%%" )/100*( m-n+1 )+0.5 )
		elseif k:match( "-?%d+" ) then
			size = size + k
		end
	end

	return size > 0 and size or 0
end

local function getBounds()
	--[[
		Get the exact boundaries for the current GUI object. If necessary the positions
		are calculated relative to the parent object
	]]--
	local coords, sizing, xSize, ySize = {}

	if parent then
		sizing = parent.getBounds()
	else
		xSize, ySize = term.getSize()
		sizing = {
			x1	=	1;
			x2	=	xSize;
			y1	=	1;
			y2	=	ySize;
		}
	end

	-- x-Size --

	coords.x1	=	self.left and sizing.x1+getSize( self.left, sizing.x1, sizing.x2 )
	coords.x2	=	self.right and sizing.x2-getSize( self.right, sizing.x1, sizing.x2 )

	if not ( coords.x1 and coords.x2 ) and self.width then
		coords.x1	=	not coords.x1 and coords.x2-( getSize( self.width, sizing.x1, sizing.x2 )-1 ) or coords.x1
		coords.x2	=	not coords.x2 and coords.x1+( getSize( self.width, sizing.x1, sizing.x2 )-1 ) or coords.x2
	end

	-- y-Size --

	coords.y1	=	self.top and sizing.y1+getSize( self.top, sizing.y1, sizing.y2 )
	coords.y2	=	self.bottom and sizing.y2-getSize( self.bottom, sizing.y1, sizing.y2 )

	if not ( coords.y1 and coords.y2 ) and self.height then
		coords.y1	=	not coords.y1 and coords.y2-( getSize( self.height, sizing.y1, sizing.y2 )-1 ) or coords.y1
		coords.y2	=	not coords.y2 and coords.y1+( getSize( self.height, sizing.y1, sizing.y2 )-1 ) or coords.y2
	end

	coords.x1 = coords.x1 >= sizing.x1 and coords.x1 or sizing.x1
	coords.x2 = coords.x2 <= sizing.x2 and coords.x2 or sizing.x2
	coords.y1 = coords.y1 >= sizing.y1 and coords.y1 or sizing.y1
	coords.y2 = coords.y2 <= sizing.y2 and coords.y2 or sizing.y2

	return coords
end

local function draw()
	--[[
		Draws the object and all of its children
	]]--
	if #self.boundaries == 0 or self.forcedCalculation then
		self.boundaries = getBounds()
	end

	local lineLength = self.boundaries.x2-self.boundaries.x1+1

	for y = self.boundaries.y1, self.boundaries.y2 do
		term.setCursorPos(self.boundaries.x1, y)
		term.blit((" "):rep(lineLength), ("f"):rep(lineLength), self.bg_color:rep(lineLength))
	end

	for k, v in pairs(self.children) do
		v.draw()
	end
end

local function registerChildren( element )
	--[[
		Registers a child element so that its draw function can be triggered
	]]--
	self.children[#self.children+1] = element
end

local function setBackgroundColor( color )
	--[[
		Sets the background color for the current object.
		Color names, hex numbers and powers of two are allowed

		Example:
		"red", "lightBlue", "a", "f", 32768, 16384
	]]--
	if type(color) == "number" then
		for k, v in pairs(reverseLookup) do
			if color == v then
				self.bg_color = k
				break
			end
		end
	else
		self.bg_color = lookup[color] or ( reverseLookup[color] and color ) or self.bg_color
	end
end

local function triggerCalculation()
	self.forcedCalculation = true

	for k, v in pairs(self.children) do
		v.triggerCalculation()
	end
end

local function setBoundaries( args )
	bAssert(type(args) == "table", "Boundaries must be given in table", 1)

	self.left = args.left or self.left
	self.right = args.right or self.right
	self.top = args.top or self.top
	self.bottom = args.bottom or self.bottom
	self.width = args.width or self.width
	self.height = args.height or self.height

	triggerCalculation()
end
-- Functions --

-- Returning of element --
setBackgroundColor(args.bg_color or "f");

object = {
	--getSize			=	getSize;
	getBounds			=	getBounds;
	draw				=	draw;
	GUIObjectType		=	0x01;
	registerChildren	=	registerChildren;
	setBackgroundColor	=	setBackgroundColor;
	setBoundaries		=	setBoundaries;
	triggerCalculation	=	triggerCalculation;
	children			=	self.children;
}

if parent then
	parent.registerChildren(object)
end

return object
-- Returning of element --
